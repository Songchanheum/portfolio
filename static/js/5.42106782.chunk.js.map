{"version":3,"sources":["../../../src/form-control.tsx","../../../src/use-boolean.ts","../../../src/form-label.tsx","../../../src/use-form-control.ts","../../../src/input.tsx","pages/Adder.tsx"],"names":["createContext","strict","name","useFormControlProvider","props","id","isReadOnly","uuid","useId","idProp","labelId","feedbackId","helpTextId","React","initialState","useState","value","on","useCallback","setValue","off","toggle","prev","useBoolean","getHelpTextProps","forwardedRef","ref","mergeRefs","node","setHasHelpText","getLabelProps","dataAttr","htmlFor","isDisabled","isFocused","isInvalid","getErrorMessageProps","setHasFeedbackText","getRootProps","role","getRequiredIndicatorProps","children","isRequired","onFocus","setFocus","onBlur","hasFeedbackText","hasHelpText","htmlProps","FormControl","forwardRef","styles","useMultiStyleConfig","omitThemingProps","className","cx","contextValue","__css","FormHelperText","field","useFormControlContext","useStyles","FormLabel","useStyleConfig","requiredIndicator","ownProps","display","textAlign","RequiredIndicator","useFormControl","labelIds","disabled","readOnly","required","callAllHandlers","useFormControlProps","ariaAttr","Input","input","_className","Adder","bg","useColorModeValue","minH","py","px","base","lg","md","shadow","rounded","sm","w","p","align","direction","placeholder","mt","colorScheme","isLoading","isSubmitting","type","alignSelf"],"mappings":"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","file":"static/js/5.42106782.chunk.js","sourcesContent":["import { useBoolean, useId } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\"\nimport {\n  createContext,\n  mergeRefs,\n  PropGetter,\n  PropGetterV2,\n} from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<FormControlProviderContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const getHelpTextProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = React.useCallback<PropGetterV2<\"label\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id ?? labelId,\n      htmlFor: props.htmlFor ?? id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = React.useCallback<PropGetterV2<\"div\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { getRootProps, htmlProps: _, ...context } = useFormControlProvider(\n    ownProps,\n  )\n\n  const className = cx(\"chakra-form-control\", props.className)\n  const contextValue = React.useMemo(() => context, [context])\n\n  return (\n    <FormControlProvider value={contextValue}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className={className}\n          __css={styles[\"container\"]}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n  const className = cx(\"chakra-form__helper-text\", props.className)\n  return (\n    <chakra.div\n      {...field?.getHelpTextProps(props, ref)}\n      __css={styles.helperText}\n      className={className}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n","import { useCallback, useState } from \"react\"\n\ntype InitialState = boolean | (() => boolean)\n\n/**\n * React hook to manage boolean (on - off) states\n *\n * @param initialState the initial boolean state value\n */\nexport function useBoolean(initialState: InitialState = false) {\n  const [value, setValue] = useState(initialState)\n\n  const on = useCallback(() => {\n    setValue(true)\n  }, [])\n\n  const off = useCallback(() => {\n    setValue(false)\n  }, [])\n\n  const toggle = useCallback(() => {\n    setValue((prev) => !prev)\n  }, [])\n\n  return [value, { on, off, toggle }] as const\n}\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useFormControlContext } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(\n  (passedProps, ref) => {\n    const styles = useStyleConfig(\"FormLabel\", passedProps)\n    const props = omitThemingProps(passedProps)\n\n    const {\n      className,\n      children,\n      requiredIndicator = <RequiredIndicator />,\n      ...rest\n    } = props\n\n    const field = useFormControlContext()\n    const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n    return (\n      <chakra.label\n        {...ownProps}\n        className={cx(\"chakra-form__label\", props.className)}\n        __css={{\n          display: \"block\",\n          textAlign: \"start\",\n          ...styles,\n        }}\n      >\n        {children}\n        {field?.isRequired ? requiredIndicator : null}\n      </chakra.label>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\"\n}\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  (props, ref) => {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\"\n}\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   *  please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nexport const Input = forwardRef<InputProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const ownProps = omitThemingProps(props)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nif (__DEV__) {\n  Input.displayName = \"Input\"\n}\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import React from 'react';\nimport {\n    FormControl,\n    FormLabel,\n    FormErrorMessage,\n    FormHelperText,\n    Input,\n    Button,\n    Box,\n    Flex,\n    useColorModeValue\n  } from \"@chakra-ui/react\"\n\nfunction Adder(props:any) {\n \n  return (\n    <Box\n      bg={useColorModeValue('gray.50', 'inherit')}\n      minH=\"100vh\"\n      py=\"12\"\n      px={{ base: '4', lg: '8' }}\n    >\n      <Box     \n        bg={useColorModeValue('white', 'gray.700')}\n        py=\"8\"\n        px={{ base: '4', md: '10' }}\n        shadow=\"base\"\n        rounded={{ sm: 'lg' }}>\n        <Flex w=\"100%\" p={2} align=\"center\" direction=\"column\">\n          <Flex direction=\"row\">\n          <Box p='4'w=\"320\">\n            <FormControl id=\"first-name\" isRequired>            \n              <FormLabel>First name</FormLabel>\n              <Input placeholder=\"First name\" />\n            </FormControl>\n          </Box>\n          <Box p='4'>\n            <FormControl id=\"first-name\" isRequired>            \n              <FormLabel>First name</FormLabel>\n              <Input placeholder=\"First name\" />\n            </FormControl>\n          </Box>\n          </Flex>\n          <Button\n                mt={4}\n                colorScheme=\"teal\"\n                isLoading={props.isSubmitting}\n                type=\"submit\"\n                alignSelf=\"center\">\n                저장\n            </Button>\n        </Flex>\n          \n          \n      </Box>\n    </Box>\n  )\n}\n\nexport default Adder;"],"sourceRoot":""}