{"version":3,"sources":["reportWebVitals.ts","store/auth/login.ts","api/client.ts","api/auth.ts","store/common/loading.ts","store/auth/user.ts","store/auth/loginSaga.ts","store/auth/userSaga.ts","store/index.ts","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","login","createSlice","name","initialState","loginError","reducers","reducer","prepare","payload","username","password","logout","state","login_success","login_fail","loginActions","actions","client","axios","create","baseURL","post","headers","loginCheck","get","loading","start_loading","stop_loading","loadingActions","user","userId","auth","login_check","login_check_success","action","login_check_fail","userActions","doLogin","doLogout","loginSaga","put","call","loginAPI","response","getContext","history","Cookies","set","data","token","push","remove","e","console","log","takeLatest","doLoginCheck","userSaga","loginCheckAPI","userNm","authCd","rootSaga","rootReducer","combineReducers","useReduxSelector","all","Home","React","lazy","Adder","App","customHistory","fallback","exact","path","process","render","createBrowserHistory","sagaMiddleware","createSagaMiddleware","context","store","configureStore","devTools","middleware","run","ReactDOM","StrictMode","initialColorMode","document","getElementById"],"mappings":"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","file":"static/js/main.a22e989a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { LoginType } from '../../models/types/login';\n\ninterface LoginReduxState {\n  login: boolean;\n  loginError: boolean;\n}\n\nconst name = 'login';\n\nconst initialState: LoginReduxState = {\n  login: false,\n  loginError: false,\n};\n\nconst reducers = {\n  login: {\n    reducer: () => {},\n    prepare: ({ username, password }: LoginType) => {\n      return { payload: { username, password } };\n    },\n  },\n  logout(state: LoginReduxState) {\n    state.loginError = false;\n    state.login = false;\n  },\n  login_success(state: LoginReduxState) {\n    state.loginError = false;\n    state.login = true;\n  },\n  login_fail(state: LoginReduxState) {\n    state.loginError = true;\n    state.login = false;\n  },\n};\n\nconst login = createSlice({\n  name,\n  initialState,\n  reducers,\n});\n\nexport const loginActions = login.actions;\nexport default login;\n","import axios from 'axios';\n\nconst client = axios.create({\n  baseURL: '/waste/',\n});\n\nexport default client;\n","import { LoginType } from '../models/types/login';\nimport client from './client';\n\nexport const login = ({ username, password }: LoginType) =>\n  client.post(\n    '/authenticate',\n    {\n      username,\n      password,\n    },\n    {\n      headers: {\n        'content-type': 'application/json',\n      },\n    },\n  );\n\nexport const loginCheck = () => client.get('/logincheck');\n","import { createSlice } from '@reduxjs/toolkit';\n\ninterface LoadingReduxState {\n  loading: boolean;\n}\n\nconst name = 'loading';\n\nconst initialState: LoadingReduxState = {\n  loading: false,\n};\n\nconst reducers = {\n  start_loading(state: LoadingReduxState) {\n    state.loading = true;\n  },\n  stop_loading(state: LoadingReduxState) {\n    state.loading = false;\n  },\n};\n\nconst loading = createSlice({\n  name,\n  initialState,\n  reducers,\n});\n\nexport const loadingActions = loading.actions;\n\nexport default loading;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface UserReduxState {\n  userId: string | null;\n  username: string | null;\n  auth: number;\n}\n\nconst name = 'user';\n\nconst initialState: UserReduxState = {\n  userId: null,\n  username: null,\n  auth: 2,\n};\n\nconst reducers = {\n  login_check() {},\n  login_check_success(\n    state: UserReduxState,\n    action: PayloadAction<UserReduxState>,\n  ) {\n    state.userId = action.payload.userId;\n    state.username = action.payload.username;\n    state.auth = action.payload.auth;\n  },\n  login_check_fail(state: UserReduxState) {\n    state.userId = null;\n    state.username = null;\n    state.auth = 2;\n  },\n};\n\nconst user = createSlice({\n  name,\n  initialState,\n  reducers,\n});\n\nexport const userActions = user.actions;\nexport default user;\n","import { call, put, takeLatest } from '@redux-saga/core/effects';\nimport Cookies from 'js-cookie';\nimport { getContext } from 'redux-saga/effects';\nimport { History } from 'history';\nimport { AxiosResponse } from 'axios';\n\nimport { login as loginAPI } from '../../api/auth';\nimport { loginActions } from './login';\nimport { loadingActions } from '../common/loading';\nimport { userActions } from './user';\n\nfunction* doLogin(action: ReturnType<typeof loginActions.login>) {\n  const { start_loading, stop_loading } = loadingActions;\n  const { login_success, login_fail } = loginActions;\n  const { login_check } = userActions;\n  yield put(start_loading());\n  try {\n    const response: AxiosResponse = yield call(loginAPI, action.payload);\n    const history: History = yield getContext('history');\n    Cookies.set('Authorization', `${response.data.token}`);\n    yield put(login_success());\n    history.push('/');\n    yield put(login_check());\n  } catch (e) {\n    yield put(login_fail());\n  }\n  yield put(stop_loading());\n}\n\nfunction* doLogout() {\n  const { start_loading, stop_loading } = loadingActions;\n  const history: History = yield getContext('history');\n  yield put(start_loading());\n  try {\n    Cookies.remove('Authorization');\n    history.push('/');\n  } catch (e) {\n    console.log(e);\n  }\n  yield put(stop_loading());\n}\n\nexport function* loginSaga() {\n  const { login, logout } = loginActions;\n  yield takeLatest(login, doLogin);\n  yield takeLatest(logout, doLogout);\n}\n","import { call, put, takeLatest } from '@redux-saga/core/effects';\nimport { AxiosResponse } from 'axios';\n\nimport { loginCheck as loginCheckAPI } from '../../api/auth';\nimport { loadingActions } from '../common/loading';\nimport { loginActions } from './login';\nimport { userActions } from './user';\n\nfunction* doLoginCheck() {\n  const { start_loading, stop_loading } = loadingActions;\n  const { login_check_success, login_check_fail } = userActions;\n  const { logout } = loginActions;\n  yield put(start_loading());\n  try {\n    const response: AxiosResponse = yield call(loginCheckAPI);\n    const payload = {\n      userId: response.data.userId,\n      username: response.data.userNm,\n      auth: response.data.authCd === 'A000001' ? 0 : 1,\n    };\n    yield put(login_check_success(payload));\n  } catch (e) {\n    yield put(login_check_fail());\n    yield put(logout());\n  }\n  yield put(stop_loading());\n}\n\nexport function* userSaga() {\n  const { login_check } = userActions;\n  yield takeLatest(login_check, doLoginCheck);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport {\n  TypedUseSelectorHook,\n  useSelector as useReduxSelector,\n} from 'react-redux';\nimport { all } from 'redux-saga/effects';\n\nimport login from './auth/login';\nimport { loginSaga } from './auth/loginSaga';\nimport user from './auth/user';\nimport { userSaga } from './auth/userSaga';\nimport loading from './common/loading';\n\nconst rootReducer = combineReducers({\n  login: login.reducer,\n  loading: loading.reducer,\n  user: user.reducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const useSelector: TypedUseSelectorHook<RootState> = useReduxSelector;\n\nexport function* rootSaga() {\n  yield all([loginSaga(), userSaga()]);\n}\n\nexport default rootReducer;\n","import React, { Suspense, useEffect } from 'react';\nimport { Switch, Route, Router } from 'react-router-dom';\n\nimport './App.css';\nimport { History } from 'history';\nimport { useDispatch } from 'react-redux';\nimport { loginActions } from './store/auth/login';\n\nconst Home = React.lazy(() => import('./pages/Home'));\nconst Adder = React.lazy(() => import('./pages/Adder'));\ninterface HistoryType {\n  customHistory: History;\n}\n\nfunction App({ customHistory }: HistoryType) {\n\n  return (\n    <>\n      <Router history={customHistory}>\n        <Suspense fallback={<></>}>\n          <Route exact\n              path={`${process.env.PUBLIC_URL}/`}\n              render={() => (\n                  <Home />\n              )}\n          />\n          <Route\n              path={`${process.env.PUBLIC_URL}/add`}\n              render={() => (\n                  <Adder />\n              )}\n          />\n        </Suspense>\n      </Router>\n    </>\n  );\n} \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createBrowserHistory } from 'history';\nimport createSagaMiddleware from 'redux-saga';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport { configureStore } from '@reduxjs/toolkit';\nimport rootReducer, { rootSaga } from './store';\nimport {ColorModeScript, ChakraProvider} from '@chakra-ui/react';\nimport './index.css';\nimport App from './App';\n\nconst customHistory = createBrowserHistory();\nconst sagaMiddleware = createSagaMiddleware({\n  context: {\n    history: customHistory,\n  },\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: true,\n  middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <ChakraProvider>\n      <ColorModeScript initialColorMode=\"light\" />\n      <App customHistory={customHistory} />\n    </ChakraProvider>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}